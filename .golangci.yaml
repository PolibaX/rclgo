run:
  timeout: 10m
output:
  sort-results: true
linters:
  enable-all: true
  disable:
    # The following are deprecated
    - deadcode
    - golint
    - interfacer
    - maligned
    - scopelint
    - structcheck
    - varcheck
    # The following are not useful and/or produce too many false positives
    - cyclop
    - depguard
    - exhaustivestruct
    - exhaustruct
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocyclo
    - godot
    - godox
    - gofumpt
    - gomnd
    - ifshort
    - interfacebloat
    - ireturn
    - lll
    - nestif
    - nilnil
    - nlreturn
    - nonamedreturns
    - nosnakecase
    - paralleltest
    - tagliatelle
    - testableexamples
    - testpackage
    - varnamelen
    - whitespace
    - wrapcheck
    - wsl
linters-settings:
  errcheck:
    exclude-functions:
      # Too many false positives
      - github.com/spf13/viper.BindPFlag
      - github.com/spf13/viper.BindPFlags
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Debug
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Debugf
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Debugln
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Error
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Errorf
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Errorln
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Fatal
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Fatalf
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Fatalln
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Info
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Infof
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Infoln
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Warn
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Warnf
      - (*github.com/PolibaX/rclgo/pkg/rclgo.Logger).Warnln
      - github.com/PolibaX/rclgo/pkg/rclgo.Uninit
  errorlint:
    errorf: false
  gocritic:
    disabled-checks:
      # Too many false positives
      - commentFormatting
      - dupSubExpr
      - ifElseChain
  stylecheck:
    checks:
      - all
      # Too many false positives
      - -ST1000
      - -ST1003
      - -ST1003
      - -ST1006
      - -ST1016
      - -ST1020
      - -ST1021
      - -ST1022
      - -ST1005
issues:
  exclude-use-default: false
  exclude:
    # Too many false positives
    - "var-naming: don't use underscores in Go names;"
    - "error-strings: error strings should not be capitalized or end with punctuation or a newline"
    - "err113: do not define dynamic errors, use wrapped static errors instead:"

    # The following are the default exclusions, some of which are disabled.

    # EXC0001 errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked

    # EXC0002 golint: Annoying issue about not having a comment. The rare codebase has such comments
    - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

    # EXC0003 golint: False positive when tests are defined in package 'test'
    - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this

    # EXC0004 govet: Common false positives
    # - (possible misuse of unsafe.Pointer|should have signature)

    # EXC0005 staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    # - ineffective break statement. Did you mean to break out of the outer loop

    # EXC0006 gosec: Too many false-positives on 'unsafe' usage
    - Use of unsafe calls should be audited

    # EXC0007 gosec: Too many false-positives for parametrized shell calls
    # - Subprocess launch(ed with variable|ing should be audited)

    # EXC0008 gosec: Duplicated errcheck checks
    - (G104|G307)

    # EXC0009 gosec: Too many issues in popular repos
    # - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

    # EXC0010 gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable

    # EXC0011 stylecheck: Annoying issue about not having a comment. The rare codebase has such comments
    - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

    # EXC0012 revive: Annoying issue about not having a comment. The rare codebase has such comments
    - exported (.+) should have comment( \(or a comment on this block\))? or be unexported

    # EXC0013 revive: Annoying issue about not having a comment. The rare codebase has such comments
    - package comment should be of the form "(.+)...

    # EXC0014 revive: Annoying issue about not having a comment. The rare codebase has such comments
    - comment on exported (.+) should be of the form "(.+)..."

    # EXC0015 revive: Annoying issue about not having a comment. The rare codebase has such comments
    - should have a package comment, unless it's in another file for this package
