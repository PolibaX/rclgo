/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

// Code generated by rclgo-gen. DO NOT EDIT.

package sensor_msgs_msg
import (
	"unsafe"

	"github.com/PolibaX/rclgo/pkg/rclgo"
	"github.com/PolibaX/rclgo/pkg/rclgo/types"
	"github.com/PolibaX/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <sensor_msgs/msg/nav_sat_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("sensor_msgs/NavSatStatus", NavSatStatusTypeSupport)
	typemap.RegisterMessage("sensor_msgs/msg/NavSatStatus", NavSatStatusTypeSupport)
}
const (
	NavSatStatus_STATUS_UNKNOWN int8 = -2// status is not yet set
	NavSatStatus_STATUS_NO_FIX int8 = -1// unable to fix position
	NavSatStatus_STATUS_FIX int8 = 0// unaugmented fix
	NavSatStatus_STATUS_SBAS_FIX int8 = 1// with satellite-based augmentation
	NavSatStatus_STATUS_GBAS_FIX int8 = 2// with ground-based augmentation
	NavSatStatus_SERVICE_UNKNOWN uint16 = 0// Remember service is a bitfield, so checking (service & SERVICE_UNKNOWN) will not work. Use == instead.
	NavSatStatus_SERVICE_GPS uint16 = 1
	NavSatStatus_SERVICE_GLONASS uint16 = 2
	NavSatStatus_SERVICE_COMPASS uint16 = 4// includes BeiDou.
	NavSatStatus_SERVICE_GALILEO uint16 = 8
)

type NavSatStatus struct {
	Status int8 `yaml:"status"`// STATUS_UNKNOWN
	Service uint16 `yaml:"service"`
}

// NewNavSatStatus creates a new NavSatStatus with default values.
func NewNavSatStatus() *NavSatStatus {
	self := NavSatStatus{}
	self.SetDefaults()
	return &self
}

func (t *NavSatStatus) Clone() *NavSatStatus {
	c := &NavSatStatus{}
	c.Status = t.Status
	c.Service = t.Service
	return c
}

func (t *NavSatStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *NavSatStatus) SetDefaults() {
	t.Status = -2
	t.Service = 0
}

func (t *NavSatStatus) GetTypeSupport() types.MessageTypeSupport {
	return NavSatStatusTypeSupport
}

// NavSatStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type NavSatStatusPublisher struct {
	*rclgo.Publisher
}

// NewNavSatStatusPublisher creates and returns a new publisher for the
// NavSatStatus
func NewNavSatStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*NavSatStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, NavSatStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NavSatStatusPublisher{pub}, nil
}

func (p *NavSatStatusPublisher) Publish(msg *NavSatStatus) error {
	return p.Publisher.Publish(msg)
}

// NavSatStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type NavSatStatusSubscription struct {
	*rclgo.Subscription
}

// NavSatStatusSubscriptionCallback type is used to provide a subscription
// handler function for a NavSatStatusSubscription.
type NavSatStatusSubscriptionCallback func(msg *NavSatStatus, info *rclgo.MessageInfo, err error)

// NewNavSatStatusSubscription creates and returns a new subscription for the
// NavSatStatus
func NewNavSatStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback NavSatStatusSubscriptionCallback) (*NavSatStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg NavSatStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, NavSatStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &NavSatStatusSubscription{sub}, nil
}

func (s *NavSatStatusSubscription) TakeMessage(out *NavSatStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneNavSatStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNavSatStatusSlice(dst, src []NavSatStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NavSatStatusTypeSupport types.MessageTypeSupport = _NavSatStatusTypeSupport{}

type _NavSatStatusTypeSupport struct{}

func (t _NavSatStatusTypeSupport) New() types.Message {
	return NewNavSatStatus()
}

func (t _NavSatStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__NavSatStatus
	return (unsafe.Pointer)(C.sensor_msgs__msg__NavSatStatus__create())
}

func (t _NavSatStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__NavSatStatus__destroy((*C.sensor_msgs__msg__NavSatStatus)(pointer_to_free))
}

func (t _NavSatStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*NavSatStatus)
	mem := (*C.sensor_msgs__msg__NavSatStatus)(dst)
	mem.status = C.int8_t(m.Status)
	mem.service = C.uint16_t(m.Service)
}

func (t _NavSatStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NavSatStatus)
	mem := (*C.sensor_msgs__msg__NavSatStatus)(ros2_message_buffer)
	m.Status = int8(mem.status)
	m.Service = uint16(mem.service)
}

func (t _NavSatStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus())
}

type CNavSatStatus = C.sensor_msgs__msg__NavSatStatus
type CNavSatStatus__Sequence = C.sensor_msgs__msg__NavSatStatus__Sequence

func NavSatStatus__Sequence_to_Go(goSlice *[]NavSatStatus, cSlice CNavSatStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NavSatStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		NavSatStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func NavSatStatus__Sequence_to_C(cSlice *CNavSatStatus__Sequence, goSlice []NavSatStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__NavSatStatus)(C.malloc(C.sizeof_struct_sensor_msgs__msg__NavSatStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		NavSatStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func NavSatStatus__Array_to_Go(goSlice []NavSatStatus, cSlice []CNavSatStatus) {
	for i := 0; i < len(cSlice); i++ {
		NavSatStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func NavSatStatus__Array_to_C(cSlice []CNavSatStatus, goSlice []NavSatStatus) {
	for i := 0; i < len(goSlice); i++ {
		NavSatStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
