/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

// Code generated by rclgo-gen. DO NOT EDIT.

package sensor_msgs_msg
import (
	"unsafe"

	"github.com/PolibaX/rclgo/pkg/rclgo"
	"github.com/PolibaX/rclgo/pkg/rclgo/types"
	"github.com/PolibaX/rclgo/pkg/rclgo/typemap"
	primitives "github.com/PolibaX/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <sensor_msgs/msg/laser_echo.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("sensor_msgs/LaserEcho", LaserEchoTypeSupport)
	typemap.RegisterMessage("sensor_msgs/msg/LaserEcho", LaserEchoTypeSupport)
}

type LaserEcho struct {
	Echoes []float32 `yaml:"echoes"`// Multiple values of ranges or intensities.
}

// NewLaserEcho creates a new LaserEcho with default values.
func NewLaserEcho() *LaserEcho {
	self := LaserEcho{}
	self.SetDefaults()
	return &self
}

func (t *LaserEcho) Clone() *LaserEcho {
	c := &LaserEcho{}
	if t.Echoes != nil {
		c.Echoes = make([]float32, len(t.Echoes))
		copy(c.Echoes, t.Echoes)
	}
	return c
}

func (t *LaserEcho) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LaserEcho) SetDefaults() {
	t.Echoes = nil
}

func (t *LaserEcho) GetTypeSupport() types.MessageTypeSupport {
	return LaserEchoTypeSupport
}

// LaserEchoPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LaserEchoPublisher struct {
	*rclgo.Publisher
}

// NewLaserEchoPublisher creates and returns a new publisher for the
// LaserEcho
func NewLaserEchoPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LaserEchoPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LaserEchoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LaserEchoPublisher{pub}, nil
}

func (p *LaserEchoPublisher) Publish(msg *LaserEcho) error {
	return p.Publisher.Publish(msg)
}

// LaserEchoSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LaserEchoSubscription struct {
	*rclgo.Subscription
}

// LaserEchoSubscriptionCallback type is used to provide a subscription
// handler function for a LaserEchoSubscription.
type LaserEchoSubscriptionCallback func(msg *LaserEcho, info *rclgo.MessageInfo, err error)

// NewLaserEchoSubscription creates and returns a new subscription for the
// LaserEcho
func NewLaserEchoSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LaserEchoSubscriptionCallback) (*LaserEchoSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LaserEcho
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LaserEchoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LaserEchoSubscription{sub}, nil
}

func (s *LaserEchoSubscription) TakeMessage(out *LaserEcho) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLaserEchoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLaserEchoSlice(dst, src []LaserEcho) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LaserEchoTypeSupport types.MessageTypeSupport = _LaserEchoTypeSupport{}

type _LaserEchoTypeSupport struct{}

func (t _LaserEchoTypeSupport) New() types.Message {
	return NewLaserEcho()
}

func (t _LaserEchoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__LaserEcho
	return (unsafe.Pointer)(C.sensor_msgs__msg__LaserEcho__create())
}

func (t _LaserEchoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__LaserEcho__destroy((*C.sensor_msgs__msg__LaserEcho)(pointer_to_free))
}

func (t _LaserEchoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LaserEcho)
	mem := (*C.sensor_msgs__msg__LaserEcho)(dst)
	primitives.Float32__Sequence_to_C((*primitives.CFloat32__Sequence)(unsafe.Pointer(&mem.echoes)), m.Echoes)
}

func (t _LaserEchoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LaserEcho)
	mem := (*C.sensor_msgs__msg__LaserEcho)(ros2_message_buffer)
	primitives.Float32__Sequence_to_Go(&m.Echoes, *(*primitives.CFloat32__Sequence)(unsafe.Pointer(&mem.echoes)))
}

func (t _LaserEchoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__LaserEcho())
}

type CLaserEcho = C.sensor_msgs__msg__LaserEcho
type CLaserEcho__Sequence = C.sensor_msgs__msg__LaserEcho__Sequence

func LaserEcho__Sequence_to_Go(goSlice *[]LaserEcho, cSlice CLaserEcho__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LaserEcho, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LaserEchoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LaserEcho__Sequence_to_C(cSlice *CLaserEcho__Sequence, goSlice []LaserEcho) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__LaserEcho)(C.malloc(C.sizeof_struct_sensor_msgs__msg__LaserEcho * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LaserEchoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LaserEcho__Array_to_Go(goSlice []LaserEcho, cSlice []CLaserEcho) {
	for i := 0; i < len(cSlice); i++ {
		LaserEchoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LaserEcho__Array_to_C(cSlice []CLaserEcho, goSlice []LaserEcho) {
	for i := 0; i < len(goSlice); i++ {
		LaserEchoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
