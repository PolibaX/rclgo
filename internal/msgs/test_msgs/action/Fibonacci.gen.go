/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

// Code generated by rclgo-gen. DO NOT EDIT.

package test_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <test_msgs/action/fibonacci.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/PolibaX/rclgo/pkg/rclgo"
	"github.com/PolibaX/rclgo/pkg/rclgo/typemap"
	"github.com/PolibaX/rclgo/pkg/rclgo/types"

	action_msgs_msg "github.com/PolibaX/rclgo/internal/msgs/action_msgs/msg"
	action_msgs_srv "github.com/PolibaX/rclgo/internal/msgs/action_msgs/srv"
)

func init() {
	typemap.RegisterAction("test_msgs/Fibonacci", FibonacciTypeSupport)
	typemap.RegisterAction("test_msgs/action/Fibonacci", FibonacciTypeSupport)
}

type _FibonacciTypeSupport struct {}

func (s _FibonacciTypeSupport) Goal() types.MessageTypeSupport {
	return Fibonacci_GoalTypeSupport
}

func (s _FibonacciTypeSupport) SendGoal() types.ServiceTypeSupport {
	return Fibonacci_SendGoalTypeSupport
}

func (s _FibonacciTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) types.Message {
	msg := NewFibonacci_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _FibonacciTypeSupport) Result() types.MessageTypeSupport {
	return Fibonacci_ResultTypeSupport
}

func (s _FibonacciTypeSupport) GetResult() types.ServiceTypeSupport {
	return Fibonacci_GetResultTypeSupport
}

func (s _FibonacciTypeSupport) NewGetResultResponse(status int8, result types.Message) types.Message {
	msg := NewFibonacci_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewFibonacci_Result()
	} else {
		msg.Result = *result.(*Fibonacci_Result)
	}
	return msg
}

func (s _FibonacciTypeSupport) CancelGoal() types.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _FibonacciTypeSupport) Feedback() types.MessageTypeSupport {
	return Fibonacci_FeedbackTypeSupport
}

func (s _FibonacciTypeSupport) FeedbackMessage() types.MessageTypeSupport {
	return Fibonacci_FeedbackMessageTypeSupport
}

func (s _FibonacciTypeSupport) NewFeedbackMessage(goalID *types.GoalID, feedback types.Message) types.Message {
	msg := NewFibonacci_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*Fibonacci_Feedback)
	return msg
}

func (s _FibonacciTypeSupport) GoalStatusArray() types.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _FibonacciTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__test_msgs__action__Fibonacci())
}

// Modifying this variable is undefined behavior.
var FibonacciTypeSupport types.ActionTypeSupport = _FibonacciTypeSupport{}

type FibonacciFeedbackSender struct {
	sender rclgo.FeedbackSender
}

func (s *FibonacciFeedbackSender) Send(msg *Fibonacci_Feedback) error {
	return s.sender.Send(msg)
}

type FibonacciGoalHandle struct{
	*rclgo.GoalHandle

	Description *Fibonacci_Goal
}

func (g *FibonacciGoalHandle) Accept() (*FibonacciFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &FibonacciFeedbackSender{*s}, nil
}

type FibonacciAction interface {
	ExecuteGoal(context.Context, *FibonacciGoalHandle) (*Fibonacci_Result, error)
}

func NewFibonacciAction(
	executeGoal func(context.Context, *FibonacciGoalHandle) (*Fibonacci_Result, error),
) FibonacciAction {
	return _FibonacciFuncAction(executeGoal)
}

type _FibonacciFuncAction func(context.Context, *FibonacciGoalHandle) (*Fibonacci_Result, error)

func (a _FibonacciFuncAction) ExecuteGoal(
	ctx context.Context, goal *FibonacciGoalHandle,
) (*Fibonacci_Result, error) {
	return a(ctx, goal)
}

type _FibonacciAction struct {
	action FibonacciAction
}

func (a _FibonacciAction) ExecuteGoal(ctx context.Context, handle *rclgo.GoalHandle) (types.Message, error) {
	return a.action.ExecuteGoal(ctx, &FibonacciGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*Fibonacci_Goal),
	})
}

func (a _FibonacciAction) TypeSupport() types.ActionTypeSupport {
	return FibonacciTypeSupport
}

type FibonacciServer struct{
	*rclgo.ActionServer
}

func NewFibonacciServer(node *rclgo.Node, name string, action FibonacciAction, opts *rclgo.ActionServerOptions) (*FibonacciServer, error) {
	server, err := node.NewActionServer(name, _FibonacciAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &FibonacciServer{server}, nil
}

type FibonacciFeedbackHandler func(context.Context, *Fibonacci_FeedbackMessage)

type FibonacciStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type FibonacciClient struct{
	*rclgo.ActionClient
}

func NewFibonacciClient(node *rclgo.Node, name string, opts *rclgo.ActionClientOptions) (*FibonacciClient, error) {
	client, err := node.NewActionClient(name, FibonacciTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &FibonacciClient{client}, nil
}

func (c *FibonacciClient) WatchGoal(ctx context.Context, goal *Fibonacci_Goal, onFeedback FibonacciFeedbackHandler) (*Fibonacci_GetResult_Response, *types.GoalID, error) {
	var resp types.Message
	var goalID *types.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg types.Message) {
			onFeedback(ctx, msg.(*Fibonacci_FeedbackMessage))
		})
	}
	if r, ok := resp.(*Fibonacci_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *FibonacciClient) SendGoal(ctx context.Context, goal *Fibonacci_Goal) (*Fibonacci_SendGoal_Response, *types.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*Fibonacci_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *FibonacciClient) SendGoalRequest(ctx context.Context, request *Fibonacci_SendGoal_Request) (*Fibonacci_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*Fibonacci_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *FibonacciClient) GetResult(ctx context.Context, goalID *types.GoalID) (*Fibonacci_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*Fibonacci_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *FibonacciClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *FibonacciClient) WatchFeedback(ctx context.Context, goalID *types.GoalID, handler FibonacciFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*Fibonacci_FeedbackMessage))
	})
}

func (c *FibonacciClient) WatchStatus(ctx context.Context, goalID *types.GoalID, handler FibonacciStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}
