/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

// Code generated by rclgo-gen. DO NOT EDIT.

package test_msgs_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <test_msgs/action/nested_message.h>
*/
import "C"

import (
	"context"
	"time"
	"unsafe"

	"github.com/PolibaX/rclgo/pkg/rclgo"
	"github.com/PolibaX/rclgo/pkg/rclgo/typemap"
	"github.com/PolibaX/rclgo/pkg/rclgo/types"

	action_msgs_msg "github.com/PolibaX/rclgo/internal/msgs/action_msgs/msg"
	action_msgs_srv "github.com/PolibaX/rclgo/internal/msgs/action_msgs/srv"
)

func init() {
	typemap.RegisterAction("test_msgs/NestedMessage", NestedMessageTypeSupport)
	typemap.RegisterAction("test_msgs/action/NestedMessage", NestedMessageTypeSupport)
}

type _NestedMessageTypeSupport struct {}

func (s _NestedMessageTypeSupport) Goal() types.MessageTypeSupport {
	return NestedMessage_GoalTypeSupport
}

func (s _NestedMessageTypeSupport) SendGoal() types.ServiceTypeSupport {
	return NestedMessage_SendGoalTypeSupport
}

func (s _NestedMessageTypeSupport) NewSendGoalResponse(accepted bool, stamp time.Duration) types.Message {
	msg := NewNestedMessage_SendGoal_Response()
	msg.Accepted = accepted
	secs := stamp.Truncate(time.Second)
	msg.Stamp.Sec = int32(secs)
	msg.Stamp.Nanosec = uint32(stamp - secs)
	return msg
}

func (s _NestedMessageTypeSupport) Result() types.MessageTypeSupport {
	return NestedMessage_ResultTypeSupport
}

func (s _NestedMessageTypeSupport) GetResult() types.ServiceTypeSupport {
	return NestedMessage_GetResultTypeSupport
}

func (s _NestedMessageTypeSupport) NewGetResultResponse(status int8, result types.Message) types.Message {
	msg := NewNestedMessage_GetResult_Response()
	msg.Status = status
	if result == nil {
		msg.Result = *NewNestedMessage_Result()
	} else {
		msg.Result = *result.(*NestedMessage_Result)
	}
	return msg
}

func (s _NestedMessageTypeSupport) CancelGoal() types.ServiceTypeSupport {
	return action_msgs_srv.CancelGoalTypeSupport
}

func (s _NestedMessageTypeSupport) Feedback() types.MessageTypeSupport {
	return NestedMessage_FeedbackTypeSupport
}

func (s _NestedMessageTypeSupport) FeedbackMessage() types.MessageTypeSupport {
	return NestedMessage_FeedbackMessageTypeSupport
}

func (s _NestedMessageTypeSupport) NewFeedbackMessage(goalID *types.GoalID, feedback types.Message) types.Message {
	msg := NewNestedMessage_FeedbackMessage()
	msg.GoalID.Uuid = *goalID
	msg.Feedback = *feedback.(*NestedMessage_Feedback)
	return msg
}

func (s _NestedMessageTypeSupport) GoalStatusArray() types.MessageTypeSupport {
	return action_msgs_msg.GoalStatusArrayTypeSupport
}

func (s _NestedMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_action_type_support_handle__test_msgs__action__NestedMessage())
}

// Modifying this variable is undefined behavior.
var NestedMessageTypeSupport types.ActionTypeSupport = _NestedMessageTypeSupport{}

type NestedMessageFeedbackSender struct {
	sender rclgo.FeedbackSender
}

func (s *NestedMessageFeedbackSender) Send(msg *NestedMessage_Feedback) error {
	return s.sender.Send(msg)
}

type NestedMessageGoalHandle struct{
	*rclgo.GoalHandle

	Description *NestedMessage_Goal
}

func (g *NestedMessageGoalHandle) Accept() (*NestedMessageFeedbackSender, error) {
	s, err := g.GoalHandle.Accept()
	if err != nil {
		return nil, err
	}
	return &NestedMessageFeedbackSender{*s}, nil
}

type NestedMessageAction interface {
	ExecuteGoal(context.Context, *NestedMessageGoalHandle) (*NestedMessage_Result, error)
}

func NewNestedMessageAction(
	executeGoal func(context.Context, *NestedMessageGoalHandle) (*NestedMessage_Result, error),
) NestedMessageAction {
	return _NestedMessageFuncAction(executeGoal)
}

type _NestedMessageFuncAction func(context.Context, *NestedMessageGoalHandle) (*NestedMessage_Result, error)

func (a _NestedMessageFuncAction) ExecuteGoal(
	ctx context.Context, goal *NestedMessageGoalHandle,
) (*NestedMessage_Result, error) {
	return a(ctx, goal)
}

type _NestedMessageAction struct {
	action NestedMessageAction
}

func (a _NestedMessageAction) ExecuteGoal(ctx context.Context, handle *rclgo.GoalHandle) (types.Message, error) {
	return a.action.ExecuteGoal(ctx, &NestedMessageGoalHandle{
		GoalHandle:  handle,
		Description: handle.Description.(*NestedMessage_Goal),
	})
}

func (a _NestedMessageAction) TypeSupport() types.ActionTypeSupport {
	return NestedMessageTypeSupport
}

type NestedMessageServer struct{
	*rclgo.ActionServer
}

func NewNestedMessageServer(node *rclgo.Node, name string, action NestedMessageAction, opts *rclgo.ActionServerOptions) (*NestedMessageServer, error) {
	server, err := node.NewActionServer(name, _NestedMessageAction{action}, opts)
	if err != nil {
		return nil, err
	}
	return &NestedMessageServer{server}, nil
}

type NestedMessageFeedbackHandler func(context.Context, *NestedMessage_FeedbackMessage)

type NestedMessageStatusHandler func(context.Context, *action_msgs_msg.GoalStatus)

type NestedMessageClient struct{
	*rclgo.ActionClient
}

func NewNestedMessageClient(node *rclgo.Node, name string, opts *rclgo.ActionClientOptions) (*NestedMessageClient, error) {
	client, err := node.NewActionClient(name, NestedMessageTypeSupport, opts)
	if err != nil {
		return nil, err
	}
	return &NestedMessageClient{client}, nil
}

func (c *NestedMessageClient) WatchGoal(ctx context.Context, goal *NestedMessage_Goal, onFeedback NestedMessageFeedbackHandler) (*NestedMessage_GetResult_Response, *types.GoalID, error) {
	var resp types.Message
	var goalID *types.GoalID
	var err error
	if onFeedback == nil {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, nil)
	} else {
		resp, goalID, err = c.ActionClient.WatchGoal(ctx, goal, func(ctx context.Context, msg types.Message) {
			onFeedback(ctx, msg.(*NestedMessage_FeedbackMessage))
		})
	}
	if r, ok := resp.(*NestedMessage_GetResult_Response); ok {
		return r, goalID, err
	}
	return nil, goalID, err
}

func (c *NestedMessageClient) SendGoal(ctx context.Context, goal *NestedMessage_Goal) (*NestedMessage_SendGoal_Response, *types.GoalID, error) {
	resp, id, err := c.ActionClient.SendGoal(ctx, goal)
	if r, ok := resp.(*NestedMessage_SendGoal_Response); ok {
		return r, id, err
	}
	return nil, id, err
}

func (c *NestedMessageClient) SendGoalRequest(ctx context.Context, request *NestedMessage_SendGoal_Request) (*NestedMessage_SendGoal_Response, error) {
	resp, err := c.ActionClient.SendGoalRequest(ctx, request)
	if r, ok := resp.(*NestedMessage_SendGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *NestedMessageClient) GetResult(ctx context.Context, goalID *types.GoalID) (*NestedMessage_GetResult_Response, error) {
	resp, err := c.ActionClient.GetResult(ctx, goalID)
	if r, ok := resp.(*NestedMessage_GetResult_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *NestedMessageClient) CancelGoal(ctx context.Context, request *action_msgs_srv.CancelGoal_Request) (*action_msgs_srv.CancelGoal_Response, error) {
	resp, err := c.ActionClient.CancelGoal(ctx, request)
	if r, ok := resp.(*action_msgs_srv.CancelGoal_Response); ok {
		return r, err
	}
	return nil, err
}

func (c *NestedMessageClient) WatchFeedback(ctx context.Context, goalID *types.GoalID, handler NestedMessageFeedbackHandler) <-chan error {
	return c.ActionClient.WatchFeedback(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*NestedMessage_FeedbackMessage))
	})
}

func (c *NestedMessageClient) WatchStatus(ctx context.Context, goalID *types.GoalID, handler NestedMessageStatusHandler) <-chan error {
	return c.ActionClient.WatchStatus(ctx, goalID, func(ctx context.Context, msg types.Message) {
		handler(ctx, msg.(*action_msgs_msg.GoalStatus))
	})
}
