/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

// Code generated by rclgo-gen. DO NOT EDIT.

package geometry_msgs_msg
import (
	"unsafe"

	"github.com/PolibaX/rclgo/pkg/rclgo"
	"github.com/PolibaX/rclgo/pkg/rclgo/types"
	"github.com/PolibaX/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/pose2_d.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geometry_msgs/Pose2D", Pose2DTypeSupport)
	typemap.RegisterMessage("geometry_msgs/msg/Pose2D", Pose2DTypeSupport)
}

type Pose2D struct {
	X float64 `yaml:"x"`
	Y float64 `yaml:"y"`
	Theta float64 `yaml:"theta"`
}

// NewPose2D creates a new Pose2D with default values.
func NewPose2D() *Pose2D {
	self := Pose2D{}
	self.SetDefaults()
	return &self
}

func (t *Pose2D) Clone() *Pose2D {
	c := &Pose2D{}
	c.X = t.X
	c.Y = t.Y
	c.Theta = t.Theta
	return c
}

func (t *Pose2D) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Pose2D) SetDefaults() {
	t.X = 0
	t.Y = 0
	t.Theta = 0
}

func (t *Pose2D) GetTypeSupport() types.MessageTypeSupport {
	return Pose2DTypeSupport
}

// Pose2DPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Pose2DPublisher struct {
	*rclgo.Publisher
}

// NewPose2DPublisher creates and returns a new publisher for the
// Pose2D
func NewPose2DPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Pose2DPublisher, error) {
	pub, err := node.NewPublisher(topic_name, Pose2DTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Pose2DPublisher{pub}, nil
}

func (p *Pose2DPublisher) Publish(msg *Pose2D) error {
	return p.Publisher.Publish(msg)
}

// Pose2DSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Pose2DSubscription struct {
	*rclgo.Subscription
}

// Pose2DSubscriptionCallback type is used to provide a subscription
// handler function for a Pose2DSubscription.
type Pose2DSubscriptionCallback func(msg *Pose2D, info *rclgo.MessageInfo, err error)

// NewPose2DSubscription creates and returns a new subscription for the
// Pose2D
func NewPose2DSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Pose2DSubscriptionCallback) (*Pose2DSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Pose2D
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Pose2DTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Pose2DSubscription{sub}, nil
}

func (s *Pose2DSubscription) TakeMessage(out *Pose2D) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePose2DSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePose2DSlice(dst, src []Pose2D) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Pose2DTypeSupport types.MessageTypeSupport = _Pose2DTypeSupport{}

type _Pose2DTypeSupport struct{}

func (t _Pose2DTypeSupport) New() types.Message {
	return NewPose2D()
}

func (t _Pose2DTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__Pose2D
	return (unsafe.Pointer)(C.geometry_msgs__msg__Pose2D__create())
}

func (t _Pose2DTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__Pose2D__destroy((*C.geometry_msgs__msg__Pose2D)(pointer_to_free))
}

func (t _Pose2DTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Pose2D)
	mem := (*C.geometry_msgs__msg__Pose2D)(dst)
	mem.x = C.double(m.X)
	mem.y = C.double(m.Y)
	mem.theta = C.double(m.Theta)
}

func (t _Pose2DTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Pose2D)
	mem := (*C.geometry_msgs__msg__Pose2D)(ros2_message_buffer)
	m.X = float64(mem.x)
	m.Y = float64(mem.y)
	m.Theta = float64(mem.theta)
}

func (t _Pose2DTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Pose2D())
}

type CPose2D = C.geometry_msgs__msg__Pose2D
type CPose2D__Sequence = C.geometry_msgs__msg__Pose2D__Sequence

func Pose2D__Sequence_to_Go(goSlice *[]Pose2D, cSlice CPose2D__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Pose2D, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Pose2DTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Pose2D__Sequence_to_C(cSlice *CPose2D__Sequence, goSlice []Pose2D) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__Pose2D)(C.malloc(C.sizeof_struct_geometry_msgs__msg__Pose2D * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Pose2DTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Pose2D__Array_to_Go(goSlice []Pose2D, cSlice []CPose2D) {
	for i := 0; i < len(cSlice); i++ {
		Pose2DTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Pose2D__Array_to_C(cSlice []CPose2D, goSlice []Pose2D) {
	for i := 0; i < len(goSlice); i++ {
		Pose2DTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
