/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

// Code generated by rclgo-gen. DO NOT EDIT.

package std_msgs_msg
import (
	"unsafe"

	"github.com/PolibaX/rclgo/pkg/rclgo"
	"github.com/PolibaX/rclgo/pkg/rclgo/types"
	"github.com/PolibaX/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <std_msgs/msg/empty.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("std_msgs/Empty", EmptyTypeSupport)
	typemap.RegisterMessage("std_msgs/msg/Empty", EmptyTypeSupport)
}

type Empty struct {
}

// NewEmpty creates a new Empty with default values.
func NewEmpty() *Empty {
	self := Empty{}
	self.SetDefaults()
	return &self
}

func (t *Empty) Clone() *Empty {
	c := &Empty{}
	return c
}

func (t *Empty) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Empty) SetDefaults() {
}

func (t *Empty) GetTypeSupport() types.MessageTypeSupport {
	return EmptyTypeSupport
}

// EmptyPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EmptyPublisher struct {
	*rclgo.Publisher
}

// NewEmptyPublisher creates and returns a new publisher for the
// Empty
func NewEmptyPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EmptyPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EmptyTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EmptyPublisher{pub}, nil
}

func (p *EmptyPublisher) Publish(msg *Empty) error {
	return p.Publisher.Publish(msg)
}

// EmptySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EmptySubscription struct {
	*rclgo.Subscription
}

// EmptySubscriptionCallback type is used to provide a subscription
// handler function for a EmptySubscription.
type EmptySubscriptionCallback func(msg *Empty, info *rclgo.MessageInfo, err error)

// NewEmptySubscription creates and returns a new subscription for the
// Empty
func NewEmptySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EmptySubscriptionCallback) (*EmptySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Empty
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EmptyTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EmptySubscription{sub}, nil
}

func (s *EmptySubscription) TakeMessage(out *Empty) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEmptySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEmptySlice(dst, src []Empty) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EmptyTypeSupport types.MessageTypeSupport = _EmptyTypeSupport{}

type _EmptyTypeSupport struct{}

func (t _EmptyTypeSupport) New() types.Message {
	return NewEmpty()
}

func (t _EmptyTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.std_msgs__msg__Empty
	return (unsafe.Pointer)(C.std_msgs__msg__Empty__create())
}

func (t _EmptyTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.std_msgs__msg__Empty__destroy((*C.std_msgs__msg__Empty)(pointer_to_free))
}

func (t _EmptyTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	
}

func (t _EmptyTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	
}

func (t _EmptyTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Empty())
}

type CEmpty = C.std_msgs__msg__Empty
type CEmpty__Sequence = C.std_msgs__msg__Empty__Sequence

func Empty__Sequence_to_Go(goSlice *[]Empty, cSlice CEmpty__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Empty, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EmptyTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Empty__Sequence_to_C(cSlice *CEmpty__Sequence, goSlice []Empty) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.std_msgs__msg__Empty)(C.malloc(C.sizeof_struct_std_msgs__msg__Empty * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EmptyTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Empty__Array_to_Go(goSlice []Empty, cSlice []CEmpty) {
	for i := 0; i < len(cSlice); i++ {
		EmptyTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Empty__Array_to_C(cSlice []CEmpty, goSlice []Empty) {
	for i := 0; i < len(goSlice); i++ {
		EmptyTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
